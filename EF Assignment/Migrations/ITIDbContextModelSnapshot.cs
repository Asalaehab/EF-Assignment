// <auto-generated />
using System;
using EF_Assignment.Dbcontexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Assignment.Migrations
{
    [DbContext(typeof(ITIDbContext))]
    partial class ITIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Assignment.Models.Course", b =>
                {
                    b.Property<int>("crs_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("crs_Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Course Name");

                    b.Property<int>("courseTopicId")
                        .HasColumnType("int");

                    b.HasKey("crs_Id");

                    b.HasIndex("courseTopicId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EF_Assignment.Models.CourseInstrctors", b =>
                {
                    b.Property<int>("InsId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("evaluate")
                        .HasColumnType("int");

                    b.HasKey("InsId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseInstrctors");
                });

            modelBuilder.Entity("EF_Assignment.Models.Department", b =>
                {
                    b.Property<int>("dept_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("dept_Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Dept_Name");

                    b.Property<DateTime>("HiringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("dept_Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EF_Assignment.Models.Instructor", b =>
                {
                    b.Property<int>("Ins_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ins_Id"));

                    b.Property<int>("Bouns")
                        .HasColumnType("int");

                    b.Property<int>("HourRate")
                        .HasColumnType("int");

                    b.Property<string>("Ins_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Instructor Name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Salary");

                    b.HasKey("Ins_Id");

                    b.HasIndex("InstructorDepartmentId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EF_Assignment.Models.Student", b =>
                {
                    b.Property<int>("stud_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stud_Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName(" Student Address");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Student Age");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("First Name");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StudentDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("stud_Id");

                    b.HasIndex("StudentDepartmentId");

                    b.ToTable("students");
                });

            modelBuilder.Entity("EF_Assignment.Models.StudentCourse", b =>
                {
                    b.Property<int>("StdId")
                        .HasColumnType("int");

                    b.Property<int>("CrsId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StdId", "CrsId");

                    b.HasIndex("CrsId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("EF_Assignment.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Topic Name");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("EF_Assignment.Models.Course", b =>
                {
                    b.HasOne("EF_Assignment.Models.Topic", "courseTopic")
                        .WithMany("Courses")
                        .HasForeignKey("courseTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courseTopic");
                });

            modelBuilder.Entity("EF_Assignment.Models.CourseInstrctors", b =>
                {
                    b.HasOne("EF_Assignment.Models.Course", "Course")
                        .WithMany("courseInstrctors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Assignment.Models.Instructor", "Instructor")
                        .WithMany("courseInstrctors")
                        .HasForeignKey("InsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_Assignment.Models.Instructor", b =>
                {
                    b.HasOne("EF_Assignment.Models.Department", "InstructorDepartment")
                        .WithMany("Instructors")
                        .HasForeignKey("InstructorDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstructorDepartment");
                });

            modelBuilder.Entity("EF_Assignment.Models.Student", b =>
                {
                    b.HasOne("EF_Assignment.Models.Department", "StudentDepartment")
                        .WithMany("Students")
                        .HasForeignKey("StudentDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentDepartment");
                });

            modelBuilder.Entity("EF_Assignment.Models.StudentCourse", b =>
                {
                    b.HasOne("EF_Assignment.Models.Course", "course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CrsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Assignment.Models.Student", "student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("EF_Assignment.Models.Course", b =>
                {
                    b.Navigation("CourseStudents");

                    b.Navigation("courseInstrctors");
                });

            modelBuilder.Entity("EF_Assignment.Models.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Assignment.Models.Instructor", b =>
                {
                    b.Navigation("courseInstrctors");
                });

            modelBuilder.Entity("EF_Assignment.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EF_Assignment.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
